name: build

on:
  schedule:
    - cron: '0 4 * * 1'
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
      - '*/*'

env:
  slack-channel: 'status-ci-cd'

jobs:
  build:

    if: contains(toJson(github.event.commits), '[skip ci]') == false

    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack Started
        uses: voxmedia/github-action-slack-notify-build@v1
        id: slack
        with:
          channel: ${{ env.slack-channel }}
          status: BUILD STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 50
      - run: |
          git fetch --no-tags --prune --depth=1 origin main

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/dependency-check-data
          key: ${{ runner.os }}-gradle-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Set up Node 12
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Yarn Install
        run: yarn install --frozen-lockfile

      - name: Yarn Audit
        uses: jrmcdonald/yarn-audit-action@main

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up Gradle
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set PR Number
        if: github.event_name == 'pull_request'
        run: |
          export PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "PR_NUMBER_OPT=-Dsonar.pullrequest.key=${PR_NUMBER}" >> $GITHUB_ENV

      - name: Set Branch Name
        if: github.event_name != 'pull_request'
        run: |
          export BRANCH_NAME=$(git branch --show-current)
          echo "BRANCH_NAME_OPT=-Dsonar.branch.name=${BRANCH_NAME}" >> $GITHUB_ENV

      - name: Sonar
        run: ./gradlew sonarqube -Dsonar.login=${{ secrets.SONAR_LOGIN }} ${BRANCH_NAME_OPT} ${PR_NUMBER_OPT} --info

      - name: Docker Build
        run: ./gradlew openapi-gateway-endpoints:openapi-gateway-rest-api:bootBuildImage --imageName build:latest

      - name: Docker Scan
        uses: anchore/scan-action@v2
        with:
          image: "build:latest"
          fail-build: true
          severity-cutoff: critical

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          extra_plugins: |
            gradle-semantic-release-plugin
            @semantic-release/exec
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Docker Release
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          ./gradlew openapi-gateway-endpoints:openapi-gateway-rest-api:bootBuildImage
          docker login -u jrmcdonald -p ${{ secrets.DOCKER_IO_TOKEN }}
          docker push docker.io/jrmcdonald/ms-openapi-gateway:${{ steps.semantic.outputs.new_release_version }}

      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: reports
          path: build/reports

      - name: Notify Slack Success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: ${{ env.slack-channel }}
          status: BUILD SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack Failed
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: ${{ env.slack-channel }}
          status: BUILD FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
